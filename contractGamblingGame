contract GamblingGame{

	struct Game{
		uint numNumbers;
		address master;
		uint numBets;
		uint pot;
		bool open;
		
		mapping(uint => address) betList; /// id -> gambler
		mapping(uint => uint) numbersBet; /// id -> number
		mapping(uint => uint) betAmount; /// id -> amount
		mapping(uint => uint) numberAmount; /// number -> totalAmount

		uint expirationDate;
	}
	
	/// List of games
	mapping(uint => Game) gameList;
	uint numGames;


	function GamblingGame(){
		numGames = 0;
	}
	
	function createGame(uint timeToBet){
		numGames += 1;
		
		Game newGame = gameList[numGames];
		newGame.numNumbers = 10;
		newGame.master = msg.sender;
		newGame.numBets = 0;
		newGame.pot = 0;
		newGame.expirationDate = block.timestamp + timeToBet;
		newGame.open = true;
	}
    
	function bet(uint id, uint8 numberBet){
		Game g = gameList[id];
		
		if(g.open){		
			if(numberBet <= g.numNumbers && numberBet > 0){
				g.numBets += 1;
				g.pot += msg.value;
				g.betList[g.numBets] = msg.sender;
				g.numbersBet[g.numBets] = numberBet;
				g.betAmount[g.numBets] = msg.value;
				g.numberAmount[numberBet] += msg.value;
			}
			
			checkExpirationDate(id);
		}
	}
	
	function checkExpirationDate(uint id){
		Game g = gameList[id];
		
		if(block.timestamp > g.expirationDate){
				g.open = false;
				solveBets(id);
		}
	}
    
	function solveBets(uint id){
		Game g = gameList[id];
		
		uint random = (block.timestamp % g.numNumbers) + 1;		
    			
		uint betAmount = g.numberAmount[id];
		
		uint i = 1;
		address gambler;
		if(betAmount == 0){
			while(i <= g.numBets){
				gambler = g.betList[i];
				gambler.send(g.betAmount[i]);
				
				i += 1;
			}
		}else{
			while(i <= g.numBets){
				gambler = g.betList[i];
				
				if(random == g.numbersBet[i]){
					uint userPrize = ((g.betAmount[i]*g.pot*1000)/betAmount)/1000;
					
					gambler.send(userPrize);
				}
				
				i += 1;
			}
		}  
	}		
}
